from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import json
import os
from datetime import datetime
from typing import List, Dict, Optional, Any

app = FastAPI(title="Telegram Monitor Config")


# –ß–∏—Ç–∞—î–º–æ HTML —Ñ–∞–π–ª
def get_html_content():
    try:
        with open("config_editor.html", "r", encoding="utf-8") as f:
            html_content = f.read()

        # –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
        html_content = html_content.replace(
            '<span class="badge bg-secondary">2025-06-02 14:07:23 UTC</span>',
            f'<span class="badge bg-secondary">{current_time}</span>',
        )
        return html_content
    except FileNotFoundError:
        return """
        <html><body>
        <h1>‚ùå –ü–æ–º–∏–ª–∫–∞</h1>
        <p>–§–∞–π–ª config_editor.html –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!</p>
        <p>–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ —Ñ–∞–π–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç—ñ–π –∂–µ –ø–∞–ø—Ü—ñ —â–æ —ñ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä.</p>
        </body></html>
        """


@app.get("/", response_class=HTMLResponse)
async def get_config_page():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    return HTMLResponse(content=get_html_content())


@app.get("/api/config")
async def get_config():
    """–ß–∏—Ç–∞—î –≤–∞—à —ñ—Å–Ω—É—é—á–∏–π config.json"""
    try:
        if not os.path.exists("config.json"):
            return {
                "error": "–§–∞–π–ª config.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                "template": {
                    "telegram": {"api_id": 0, "api_hash": "", "session_string": ""},
                    "global_settings": {
                        "check_interval_seconds": 60,
                        "notification_user_id": "me",
                        "timezone": "Europe/Kiev",
                        "night_hours": {"start": "22:00", "end": "08:00"},
                    },
                    "groups": [],
                },
            }

        with open("config.json", "r", encoding="utf-8") as f:
            config = json.load(f)

        print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(config.get('groups', []))} –≥—Ä—É–ø")
        return config

    except json.JSONDecodeError as e:
        raise HTTPException(status_code=400, detail=f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {str(e)}")


@app.post("/api/config")
async def save_config(config: Dict[str, Any]):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —É –≤–∞—à config.json"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ backup
        if os.path.exists("config.json"):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"config_backup_{timestamp}.json"
            import shutil

            shutil.copy("config.json", backup_name)
            print(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ backup: {backup_name}")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        with open("config.json", "w", encoding="utf-8") as f:
            json.dump(config, f, ensure_ascii=False, indent=2)

        print(f"üíæ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {len(config.get('groups', []))} –≥—Ä—É–ø")
        return {
            "status": "success",
            "message": f"–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ì—Ä—É–ø: {len(config.get('groups', []))}",
        }

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {str(e)}")


@app.get("/api/backup-list")
async def list_backups():
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ backup —Ñ–∞–π–ª—ñ–≤"""
    try:
        backups = [
            f
            for f in os.listdir(".")
            if f.startswith("config_backup_") and f.endswith(".json")
        ]
        backups.sort(reverse=True)  # –ù–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É
        return {"backups": backups}
    except Exception as e:
        return {"backups": [], "error": str(e)}


@app.post("/api/restore-backup/{backup_name}")
async def restore_backup(backup_name: str):
    """–í—ñ–¥–Ω–æ–≤–ª—é—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ backup"""
    try:
        if not os.path.exists(backup_name):
            raise HTTPException(status_code=404, detail="Backup —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        # –°—Ç–≤–æ—Ä—é—î–º–æ backup –ø–æ—Ç–æ—á–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        if os.path.exists("config.json"):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            current_backup = f"config_before_restore_{timestamp}.json"
            import shutil

            shutil.copy("config.json", current_backup)

        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑ backup
        import shutil

        shutil.copy(backup_name, "config.json")

        return {
            "status": "success",
            "message": f"–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –∑ {backup_name}",
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è: {str(e)}")


if __name__ == "__main__":
    import uvicorn

    print("ü§ñ Telegram Monitor - –í–µ–± –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ç–æ—Ä")
    print("=" * 50)
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: SergZels")
    print(f"üìÅ –†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {os.getcwd()}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
    files_status = {
        "config.json": os.path.exists("config.json"),
        "config_editor.html": os.path.exists("config_editor.html"),
    }

    print("\nüìã –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª—ñ–≤:")
    for file, exists in files_status.items():
        status = "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ" if exists else "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π"
        print(f"   {file}: {status}")

    if not files_status["config_editor.html"]:
        print("\n‚ö†Ô∏è  –£–í–ê–ì–ê: –§–∞–π–ª config_editor.html –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("   –°—Ç–≤–æ—Ä—ñ—Ç—å –π–æ–≥–æ –∑ –∫–æ–¥—É –≤–∏—â–µ –∞–±–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ.")

    if files_status["config.json"]:
        try:
            with open("config.json", "r") as f:
                config = json.load(f)
            groups_count = len(config.get("groups", []))
            print(f"\nüìä –ü–æ—Ç–æ—á–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: {groups_count} –≥—Ä—É–ø")
        except:
            print("\n‚ö†Ô∏è  config.json —ñ—Å–Ω—É—î –∞–ª–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏")
    else:
        print("\nüí° config.json –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")

    print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    print("üåê –í—ñ–¥–∫—Ä–∏–π—Ç–µ —É –±—Ä–∞—É–∑–µ—Ä—ñ: http://localhost:8080")
    print("‚èπÔ∏è  –ó—É–ø–∏–Ω–∏—Ç–∏: Ctrl+C")
    print("=" * 50)

    uvicorn.run(app, host="0.0.0.0", port=8080)

# from fastapi import FastAPI, HTTPException
# from fastapi.responses import HTMLResponse, FileResponse
# from fastapi.staticfiles import StaticFiles
# from pydantic import BaseModel
# import json
# import os
# from datetime import datetime
# from typing import List, Dict, Optional
#
# app = FastAPI(title="Telegram Monitor Config")
#
#
# # –ú–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
# class TelegramConfig(BaseModel):
#     api_id: int
#     api_hash: str
#     session_string: str
#
#
# class GlobalSettings(BaseModel):
#     check_interval_seconds: int
#     notification_user_id: str
#     timezone: str
#     night_hours: Dict[str, str]
#
#
# class MonitoringConfig(BaseModel):
#     enabled: bool
#     day_inactive_minutes: int
#     night_inactive_minutes: int
#
#
# class ApiRebootConfig(BaseModel):
#     enabled: bool
#     url: Optional[str] = None
#     method: str = "GET"
#     headers: Optional[Dict] = None
#
#
# class GroupConfig(BaseModel):
#     chat_id: int
#     name: str
#     description: str
#     monitoring: MonitoringConfig
#     api_reboot: ApiRebootConfig
#
#
# class FullConfig(BaseModel):
#     telegram: TelegramConfig
#     global_settings: GlobalSettings
#     groups: List[GroupConfig]
#
#
# @app.get("/", response_class=HTMLResponse)
# async def get_config_page():
#     """–ü–æ–≤–µ—Ä—Ç–∞—î HTML —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
#     try:
#         with open("config_editor.html", "r", encoding="utf-8") as f:
#             return HTMLResponse(content=f.read())
#     except FileNotFoundError:
#         return HTMLResponse(
#             content="<h1>–§–∞–π–ª config_editor.html –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h1>", status_code=404
#         )
#
#
# @app.get("/api/config")
# async def get_config():
#     """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
#     try:
#         if os.path.exists("config.json"):
#             with open("config.json", "r", encoding="utf-8") as f:
#                 config = json.load(f)
#             return config
#         else:
#             # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
#             return {
#                 "telegram": {"api_id": 0, "api_hash": "", "session_string": ""},
#                 "global_settings": {
#                     "check_interval_seconds": 60,
#                     "notification_user_id": "me",
#                     "timezone": "Europe/Kiev",
#                     "night_hours": {"start": "22:00", "end": "08:00"},
#                 },
#                 "groups": [],
#             }
#     except Exception as e:
#         raise HTTPException(
#             status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {str(e)}"
#         )
#
#
# @app.post("/api/config")
# async def save_config(config: FullConfig):
#     """–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
#     try:
#         # –°—Ç–≤–æ—Ä—é—î–º–æ backup
#         if os.path.exists("config.json"):
#             timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
#             backup_name = f"config_backup_{timestamp}.json"
#             import shutil
#
#             shutil.copy("config.json", backup_name)
#
#         # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
#         with open("config.json", "w", encoding="utf-8") as f:
#             json.dump(config.dict(), f, ensure_ascii=False, indent=2)
#
#         return {"status": "success", "message": "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"}
#
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {str(e)}")
#
#
# @app.post("/api/config/validate")
# async def validate_config(config: FullConfig):
#     """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
#     errors = []
#
#     # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
#     if not config.telegram.api_id:
#         errors.append("API ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
#     if not config.telegram.api_hash:
#         errors.append("API Hash –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
#     if not config.telegram.session_string:
#         errors.append("Session string –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
#
#     # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥—Ä—É–ø
#     chat_ids = []
#     for i, group in enumerate(config.groups):
#         if group.chat_id in chat_ids:
#             errors.append(f"–î—É–±–ª—ñ–∫–∞—Ç chat_id: {group.chat_id}")
#         chat_ids.append(group.chat_id)
#
#         if not group.name:
#             errors.append(f"–ì—Ä—É–ø–∞ {i + 1}: –Ω–∞–∑–≤–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞")
#
#         if group.api_reboot.enabled and not group.api_reboot.url:
#             errors.append(
#                 f"–ì—Ä—É–ø–∞ '{group.name}': API reboot —É–≤—ñ–º–∫–Ω–µ–Ω–æ –∞–ª–µ URL –Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
#             )
#
#     if errors:
#         return {"valid": False, "errors": errors}
#     else:
#         return {"valid": True, "message": "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞"}
#
#
# if __name__ == "__main__":
#     import uvicorn
#
#     print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
#     print("üìù –í—ñ–¥–∫—Ä–∏–π—Ç–µ http://localhost:8080 —É –±—Ä–∞—É–∑–µ—Ä—ñ")
#     uvicorn.run(app, host="0.0.0.0", port=8080)