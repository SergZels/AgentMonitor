from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.errors import (
    PeerIdInvalidError,
    ChatWriteForbiddenError,
    UserBannedInChannelError,
    SessionPasswordNeededError,
)
import asyncio
import aiohttp
import json
from datetime import datetime, timedelta, time
import logging
from typing import Dict, List, Optional
from dataclasses import dataclass
import sys
import pytz

#------------------------------------------------------------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("monitor.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)

@dataclass
class MonitoringConfig:
    enabled: bool
    day_inactive_minutes: int
    night_inactive_minutes: int


@dataclass
class NightHoursConfig:
    start: str  # "22:00"
    end: str  # "08:00"


@dataclass
class ApiRebootConfig:
    enabled: bool
    url: Optional[str] = None
    method: str = "GET"
    headers: Optional[Dict] = None
    payload: Optional[Dict] = None


@dataclass
class GroupConfig:
    chat_id: int
    name: str
    description: str
    monitoring: MonitoringConfig
    api_reboot: ApiRebootConfig


class TelegramMultiMonitor:
    def __init__(self, config_file: str = "config.json"):
        self.config = self.load_config(config_file)
        self.client = None
        self.notification_chat_id = None
        self.timezone = None

        # –°–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –ø–æ –∫–æ–∂–Ω—ñ–π –≥—Ä—É–ø—ñ
        self.last_message_time: Dict[int, datetime] = {}
        self.notification_sent: Dict[int, bool] = {}
        self.chat_accessible: Dict[int, bool] = {}
        self.api_reboot_sent: Dict[int, bool] = {}

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —á–∞—Å–æ–≤—É –∑–æ–Ω—É
        self.setup_timezone()

    def setup_timezone(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î —á–∞—Å–æ–≤—É –∑–æ–Ω—É"""
        try:
            timezone_name = self.config["global_settings"].get(
                "timezone", "Europe/Kiev"
            )
            self.timezone = pytz.timezone(timezone_name)
            logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —á–∞—Å–æ–≤–∞ –∑–æ–Ω–∞: {timezone_name}")
        except Exception as e:
            logger.warning(
                f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å–æ–≤–æ—ó –∑–æ–Ω–∏: {e}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è UTC"
            )
            self.timezone = pytz.UTC

    def get_night_hours(self) -> NightHoursConfig:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω—ñ—á–Ω–∏—Ö –≥–æ–¥–∏–Ω"""
        night_config = self.config["global_settings"]["night_hours"]
        return NightHoursConfig(start=night_config["start"], end=night_config["end"])

    def is_night_time(self, dt: datetime = None) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞—Ä–∞–∑ –Ω—ñ—á–Ω–∏–π —á–∞—Å"""
        if dt is None:
            dt = datetime.now(self.timezone)

        night_hours = self.get_night_hours()

        try:
            # –ü–∞—Ä—Å–∏–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É —ñ –∫—ñ–Ω—Ü—è –Ω–æ—á—ñ
            start_time = datetime.strptime(night_hours.start, "%H:%M").time()
            end_time = datetime.strptime(night_hours.end, "%H:%M").time()
            current_time = dt.time()

            # –Ø–∫—â–æ –Ω—ñ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø—ñ–≤–Ω—ñ—á (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 23:00-06:00)
            if start_time > end_time:
                return current_time >= start_time or current_time <= end_time
            # –Ø–∫—â–æ –Ω—ñ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –≤ –º–µ–∂–∞—Ö –æ–¥–Ω–æ–≥–æ –¥–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 01:00-05:00)
            else:
                return start_time <= current_time <= end_time

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω—ñ—á–Ω–æ–≥–æ —á–∞—Å—É: {e}")
            return False

    def get_current_timeout_for_group(self, group: GroupConfig) -> int:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≥—Ä—É–ø–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —á–∞—Å—É –¥–æ–±–∏"""
        is_night = self.is_night_time()

        if is_night:
            return group.monitoring.night_inactive_minutes
        else:
            return group.monitoring.day_inactive_minutes

    def get_time_period_name(self) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É —á–∞—Å—É"""
        return "üåô –ù—ñ—á" if self.is_night_time() else "‚òÄÔ∏è –î–µ–Ω—å"

    def load_config(self, config_file: str) -> dict:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ —Ñ–∞–π–ª—É"""
        try:
            with open(config_file, "r", encoding="utf-8") as f:
                config = json.load(f)
            logger.info(f"–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ {config_file}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å session_string
            if not config["telegram"].get("session_string"):
                logger.error(
                    "session_string –ø–æ—Ä–æ–∂–Ω—ñ–π! –ó–∞–ø—É—Å—Ç—ñ—Ç—å generate_session.py –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó"
                )
                raise ValueError("session_string –ø–æ—Ä–æ–∂–Ω—ñ–π")

            return config
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó {config_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            raise
        except json.JSONDecodeError as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
            raise

    def get_groups(self) -> List[GroupConfig]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        groups = []
        for group_data in self.config["groups"]:
            # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
            monitoring_config = MonitoringConfig(
                enabled=group_data["monitoring"]["enabled"],
                day_inactive_minutes=group_data["monitoring"]["day_inactive_minutes"],
                night_inactive_minutes=group_data["monitoring"][
                    "night_inactive_minutes"
                ],
            )

            # API –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
            api_config = ApiRebootConfig(
                enabled=group_data["api_reboot"]["enabled"],
                url=group_data["api_reboot"].get("url"),
                method=group_data["api_reboot"].get("method", "GET"),
                headers=group_data["api_reboot"].get("headers"),
                payload=group_data["api_reboot"].get("payload"),
            )

            group = GroupConfig(
                chat_id=group_data["chat_id"],
                name=group_data["name"],
                description=group_data["description"],
                monitoring=monitoring_config,
                api_reboot=api_config,
            )
            groups.append(group)
        return groups

    def get_enabled_groups(self) -> List[GroupConfig]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç—ñ–ª—å–∫–∏ –≥—Ä—É–ø–∏ –∑ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–º –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        return [group for group in self.get_groups() if group.monitoring.enabled]

    async def initialize_client(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Telegram –∫–ª—ñ—î–Ω—Ç–∞"""
        telegram_config = self.config["telegram"]

        try:
            session_string = telegram_config["session_string"]
            if not session_string or session_string.strip() == "":
                raise ValueError("–ü–æ—Ä–æ–∂–Ω—ñ–π session_string")

            session = StringSession(session_string)

            self.client = TelegramClient(
                session, telegram_config["api_id"], telegram_config["api_hash"]
            )

            await self.client.start()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ—î–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
            if not await self.client.is_user_authorized():
                logger.error("–ö–ª—ñ—î–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π. –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–π—Ç–µ session_string")
                raise Exception("–ö–ª—ñ—î–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            me = await self.client.get_me()
            logger.info(
                f"Telegram –∫–ª—ñ—î–Ω—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ —è–∫: {me.first_name} (@{me.username})"
            )

        except ValueError as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ session_string: {e}")
            logger.error("–ó–∞–ø—É—Å—Ç—ñ—Ç—å generate_session.py –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó")
            raise
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞: {e}")
            if "Incorrect padding" in str(e):
                logger.error(
                    "–ü—Ä–æ–±–ª–µ–º–∞ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–º session_string. –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–π—Ç–µ —Å–µ—Å—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é generate_session.py"
                )
            raise

    async def validate_chat_access(self, group: GroupConfig) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø –¥–æ —á–∞—Ç—É"""
        try:
            chat = await self.client.get_entity(group.chat_id)
            chat_title = getattr(chat, "title", f"Chat {group.chat_id}")
            logger.info(f"–î–æ—Å—Ç—É–ø –¥–æ —á–∞—Ç—É '{group.name}' ({chat_title}) –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
            self.chat_accessible[group.chat_id] = True
            return True
        except PeerIdInvalidError:
            logger.error(f"–ù–µ–≤—ñ—Ä–Ω–∏–π ID —á–∞—Ç—É –¥–ª—è –≥—Ä—É–ø–∏ '{group.name}': {group.chat_id}")
            self.chat_accessible[group.chat_id] = False
            return False
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–æ—Å—Ç—É–ø—É –¥–æ –≥—Ä—É–ø–∏ '{group.name}': {e}")
            self.chat_accessible[group.chat_id] = False
            return False

    async def setup_notification_channel(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –∫–∞–Ω–∞–ª –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        notification_user = self.config["global_settings"]["notification_user_id"]

        if notification_user == "me":
            try:
                me = await self.client.get_me()
                self.notification_chat_id = me.id
                logger.info(
                    "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è —É '–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'"
                )
                return True
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–ª–∞—Å–Ω–æ–≥–æ ID: {e}")
                return False
        else:
            self.notification_chat_id = notification_user
            return True

    async def send_notification(self, message: str) -> bool:
        """–ë–µ–∑–ø–µ—á–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        if not self.notification_chat_id:
            logger.error("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
            return False

        try:
            await self.client.send_message(self.notification_chat_id, message)
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            return False

    async def call_api_reboot(self, group: GroupConfig) -> bool:
        """–í–∏–∫–ª–∏–∫–∞—î API –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É"""
        if not group.api_reboot.enabled or not group.api_reboot.url:
            return False

        try:
            timeout = aiohttp.ClientTimeout(total=30)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                kwargs = {
                    "url": group.api_reboot.url,
                    "headers": group.api_reboot.headers or {},
                }

                if (
                    group.api_reboot.method.upper() == "POST"
                    and group.api_reboot.payload
                ):
                    kwargs["json"] = group.api_reboot.payload

                method = getattr(session, group.api_reboot.method.lower())

                logger.info(
                    f"–í–∏–∫–ª–∏–∫–∞—é API reboot –¥–ª—è –≥—Ä—É–ø–∏ '{group.name}': {group.api_reboot.method} {group.api_reboot.url}"
                )

                async with method(**kwargs) as response:
                    response_text = await response.text()

                    if response.status in [200, 201, 202]:
                        logger.info(
                            f"API reboot —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è –≥—Ä—É–ø–∏ '{group.name}'. –°—Ç–∞—Ç—É—Å: {response.status}"
                        )
                        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {response_text}")
                        return True
                    else:
                        logger.error(
                            f"API reboot –Ω–µ–≤–¥–∞–ª–∏–π –¥–ª—è –≥—Ä—É–ø–∏ '{group.name}'. –°—Ç–∞—Ç—É—Å: {response.status}"
                        )
                        logger.error(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {response_text}")
                        return False

        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É API reboot –¥–ª—è –≥—Ä—É–ø–∏ '{group.name}'")
            return False
        except Exception as e:
            logger.error(
                f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É API reboot –¥–ª—è –≥—Ä—É–ø–∏ '{group.name}': {e}"
            )
            return False

    async def check_inactivity(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É –≤—Å—ñ—Ö —á–∞—Ç–∞—Ö –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –¥–µ–Ω—å/–Ω—ñ—á —Ä–µ–∂–∏–º—ñ–≤"""
        enabled_groups = self.get_enabled_groups()

        logger.info(
            f"–ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è {len(enabled_groups)} –≥—Ä—É–ø –∑ –¥–µ–Ω—å/–Ω—ñ—á —Ä–µ–∂–∏–º–∞–º–∏"
        )
        night_hours = self.get_night_hours()
        logger.info(f"–ù—ñ—á–Ω—ñ –≥–æ–¥–∏–Ω–∏: {night_hours.start} - {night_hours.end}")

        while True:
            try:
                current_time = datetime.now(self.timezone)
                is_night = self.is_night_time(current_time)
                period_name = self.get_time_period_name()

                # –õ–æ–≥—É—î–º–æ –∑–º—ñ–Ω—É –ø–µ—Ä—ñ–æ–¥—É
                if (
                    not hasattr(self, "_last_period_night")
                    or self._last_period_night != is_night
                ):
                    logger.info(
                        f"–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ {period_name} —Ä–µ–∂–∏–º –æ {current_time.strftime('%H:%M:%S')}"
                    )
                    self._last_period_night = is_night

                for group in enabled_groups:
                    chat_id = group.chat_id

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–æ—Å—Ç—É–ø –¥–æ —á–∞—Ç—É
                    if not self.chat_accessible.get(chat_id, False):
                        continue

                    if chat_id not in self.last_message_time:
                        continue

                    last_time = self.last_message_time[chat_id]
                    time_diff = current_time - last_time

                    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏
                    current_timeout_minutes = self.get_current_timeout_for_group(group)
                    timeout_threshold = timedelta(minutes=current_timeout_minutes)

                    # –Ø–∫—â–æ –ø—Ä–æ–π—à–ª–æ –±—ñ–ª—å—à–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ–≥–æ —á–∞—Å—É –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏
                    if time_diff > timeout_threshold:
                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (—è–∫—â–æ —â–µ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–∏)
                        if not self.notification_sent.get(chat_id, False):
                            await self.send_inactivity_notification(
                                group, time_diff, is_night, current_timeout_minutes
                            )
                            self.notification_sent[chat_id] = True

                        # –í–∏–∫–ª–∏–∫–∞—î–º–æ API reboot (—è–∫—â–æ —â–µ –Ω–µ –≤–∏–∫–ª–∏–∫–∞–ª–∏ —ñ –≤–∫–ª—é—á–µ–Ω–æ)
                        if group.api_reboot.enabled and not self.api_reboot_sent.get(
                            chat_id, False
                        ):
                            if await self.call_api_reboot(group):
                                self.api_reboot_sent[chat_id] = True
                                await self.send_api_reboot_notification(
                                    group, is_night, current_timeout_minutes
                                )

                    # –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥–∏ –ø—Ä–∏ –ø–æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–±–æ –∑–º—ñ–Ω—ñ –ø–µ—Ä—ñ–æ–¥—É
                    else:
                        if self.notification_sent.get(
                            chat_id, False
                        ) or self.api_reboot_sent.get(chat_id, False):
                            logger.info(
                                f"–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø—ñ '{group.name}' ({period_name})"
                            )
                        self.notification_sent[chat_id] = False
                        self.api_reboot_sent[chat_id] = False

            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")

            # –ß–µ–∫–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
            check_interval = self.config["global_settings"]["check_interval_seconds"]
            await asyncio.sleep(check_interval)

    async def send_inactivity_notification(
        self,
        group: GroupConfig,
        time_diff: timedelta,
        is_night: bool,
        current_timeout: int,
    ):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–µ–Ω—å/–Ω—ñ—á"""
        minutes_inactive = int(time_diff.total_seconds() // 60)
        period_icon = "üåô" if is_night else "‚òÄÔ∏è"
        period_name = "–ù—ñ—á–Ω–∏–π" if is_night else "–î–µ–Ω–Ω–∏–π"

        message = (
            f"‚ö†Ô∏è **–£–í–ê–ì–ê: –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É –≥—Ä—É–ø—ñ!**\n\n"
            f"üì± –ì—Ä—É–ø–∞: {group.name}\n"
            f"üìù –û–ø–∏—Å: {group.description}\n"
            f"üÜî ID: `{group.chat_id}`\n"
            f"‚è∞ –û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {self.last_message_time[group.chat_id].strftime('%H:%M:%S')}\n"
            f"üïê –ß–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {minutes_inactive} —Ö–≤–∏–ª–∏–Ω\n"
            f"{period_icon} –†–µ–∂–∏–º: {period_name}\n"
            f"‚è≥ –ü–æ—Ä—ñ–≥ ({period_name.lower()}): {current_timeout} —Ö–≤–∏–ª–∏–Ω\n"
            f"üìä –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: –î–µ–Ω—å {group.monitoring.day_inactive_minutes}—Ö–≤ / –ù—ñ—á {group.monitoring.night_inactive_minutes}—Ö–≤\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now(self.timezone).strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"üîÑ API Reboot: {'–£–≤—ñ–º–∫–Ω–µ–Ω–æ' if group.api_reboot.enabled else '–í–∏–º–∫–Ω–µ–Ω–æ'}"
        )

        await self.send_notification(message)
        logger.info(
            f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–ª—è –≥—Ä—É–ø–∏ '{group.name}' ({period_name} —Ä–µ–∂–∏–º: {current_timeout} —Ö–≤)"
        )

    async def send_api_reboot_notification(
        self, group: GroupConfig, is_night: bool, current_timeout: int
    ):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–ª–∏–∫ API reboot"""
        period_icon = "üåô" if is_night else "‚òÄÔ∏è"
        period_name = "–ù—ñ—á–Ω–∏–π" if is_night else "–î–µ–Ω–Ω–∏–π"

        message = (
            f"üîÑ **API REBOOT –í–ò–ö–õ–ò–ö–ê–ù–û**\n\n"
            f"üì± –ì—Ä—É–ø–∞: {group.name}\n"
            f"üÜî ID: `{group.chat_id}`\n"
            f"{period_icon} –†–µ–∂–∏–º: {period_name}\n"
            f"‚è≥ –ü–æ—Ä—ñ–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {current_timeout} —Ö–≤–∏–ª–∏–Ω\n"
            f"üåê URL: {group.api_reboot.url}\n"
            f"üì° –ú–µ—Ç–æ–¥: {group.api_reboot.method}\n"
            f"üîë Headers: {list(group.api_reboot.headers.keys()) if group.api_reboot.headers else '–ù–µ–º–∞—î'}\n"
            f"‚è∞ –ß–∞—Å: {datetime.now(self.timezone).strftime('%H:%M:%S %d.%m.%Y')}"
        )

        await self.send_notification(message)
        logger.info(
            f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ API reboot –¥–ª—è –≥—Ä—É–ø–∏ '{group.name}' ({period_name} —Ä–µ–∂–∏–º)"
        )

    def setup_event_handlers(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π"""
        enabled_groups = self.get_enabled_groups()
        monitored_chat_ids = [group.chat_id for group in enabled_groups]

        logger.info(f"–ù–∞–ª–∞—à—Ç–æ–≤—É—é –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è {len(monitored_chat_ids)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä—É–ø")

        @self.client.on(events.NewMessage(chats=monitored_chat_ids))
        async def handle_monitored_message(event):
            """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —á–∞—Ç–∞—Ö"""
            try:
                chat_id = event.chat_id
                current_time = datetime.now(self.timezone)

                # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                self.last_message_time[chat_id] = current_time

                # –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥–∏
                self.notification_sent[chat_id] = False
                self.api_reboot_sent[chat_id] = False

                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≥—Ä—É–ø—É —Ç–∞ —ó—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                group = next((g for g in enabled_groups if g.chat_id == chat_id), None)
                group_name = group.name if group else f"Group {chat_id}"

                sender = await event.get_sender()
                sender_name = getattr(sender, "first_name", "–ù–µ–≤—ñ–¥–æ–º–∏–π")

                period_name = self.get_time_period_name()
                logger.info(
                    f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {sender_name} —É –≥—Ä—É–ø—ñ '{group_name}' –æ {current_time.strftime('%H:%M:%S')} ({period_name})"
                )

            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

        @self.client.on(events.NewMessage(outgoing=True))
        async def handler_outgoing(event):
            """–û–±—Ä–æ–±–ª—è—î –≤–∏—Ö—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∫–æ–º–∞–Ω–¥–∏)"""
            try:
                text = event.text.lower().strip() if event.text else ""

                if event.text == "HI":
                    await event.edit("–ü–†–ò–í–Ü–¢–ò–ö!!!!")
                elif text == "/status":
                    await self.handle_status_command(event)
                elif text == "/test":
                    await self.handle_test_command(event)
                elif text == "/reload":
                    await self.handle_reload_command(event)
                elif text.startswith("/reboot"):
                    await self.handle_manual_reboot_command(event)
                elif text == "/groups":
                    await self.handle_groups_command(event)
                elif text == "/time":
                    await self.handle_time_command(event)

            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    async def handle_time_command(self, event):
        """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–µ–Ω—å/–Ω—ñ—á"""
        current_time = datetime.now(self.timezone)
        is_night = self.is_night_time(current_time)
        night_hours = self.get_night_hours()

        period_icon = "üåô" if is_night else "‚òÄÔ∏è"
        period_name = "–ù—ñ—á–Ω–∏–π" if is_night else "–î–µ–Ω–Ω–∏–π"

        message = (
            f"üïê **–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n\n"
            f"üìÖ –î–∞—Ç–∞ —ñ —á–∞—Å: {current_time.strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"üåç –ß–∞—Å–æ–≤–∞ –∑–æ–Ω–∞: {self.timezone}\n"
            f"{period_icon} –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º: {period_name}\n\n"
            f"üåô –ù—ñ—á–Ω—ñ –≥–æ–¥–∏–Ω–∏: {night_hours.start} - {night_hours.end}\n"
            f"‚òÄÔ∏è –î–µ–Ω–Ω—ñ –≥–æ–¥–∏–Ω–∏: —Ä–µ—à—Ç–∞ —á–∞—Å—É\n\n"
            f"**–ü–æ—Ç–æ—á–Ω—ñ —Ç–∞–π–º–∞—É—Ç–∏ –¥–ª—è –≥—Ä—É–ø:**\n"
        )

        enabled_groups = self.get_enabled_groups()
        for group in enabled_groups:
            current_timeout = self.get_current_timeout_for_group(group)
            day_timeout = group.monitoring.day_inactive_minutes
            night_timeout = group.monitoring.night_inactive_minutes

            message += (
                f"üì± {group.name}: {current_timeout} —Ö–≤ "
                f"(–î–µ–Ω—å: {day_timeout}—Ö–≤ / –ù—ñ—á: {night_timeout}—Ö–≤)\n"
            )

        await event.edit(message)

    async def handle_status_command(self, event):
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /status –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–µ–Ω—å/–Ω—ñ—á"""
        all_groups = self.get_groups()
        enabled_groups = self.get_enabled_groups()
        current_time = datetime.now(self.timezone)
        is_night = self.is_night_time(current_time)
        period_icon = "üåô" if is_night else "‚òÄÔ∏è"
        period_name = "–ù—ñ—á–Ω–∏–π" if is_night else "–î–µ–Ω–Ω–∏–π"

        status_lines = [
            f"üìä **–°—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:** {len(enabled_groups)}/{len(all_groups)} –≥—Ä—É–ø –∞–∫—Ç–∏–≤–Ω—ñ\n"
            f"{period_icon} **–ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º:** {period_name}\n"
        ]

        for group in all_groups:
            chat_id = group.chat_id
            status_icon = "‚úÖ" if group.monitoring.enabled else "‚è∏Ô∏è"

            if chat_id in self.last_message_time and group.monitoring.enabled:
                last_time = self.last_message_time[chat_id]
                time_diff = current_time - last_time
                minutes_inactive = int(time_diff.total_seconds() // 60)

                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞–π–º–∞—É—Ç
                current_timeout = self.get_current_timeout_for_group(group)

                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ—Ä–æ–≥—É
                is_overdue = minutes_inactive >= current_timeout
                overdue_icon = "üî¥" if is_overdue else "üü¢"

                reboot_status = (
                    "üîÑ –í–∏–∫–ª–∏–∫–∞–Ω–æ"
                    if self.api_reboot_sent.get(chat_id, False)
                    else "‚è∏Ô∏è –û—á—ñ–∫—É—î"
                )

                status_lines.append(
                    f"{status_icon} **{group.name}** {overdue_icon}\n"
                    f"   üÜî ID: `{chat_id}`\n"
                    f"   ‚è∞ –û—Å—Ç–∞–Ω–Ω—î: {last_time.strftime('%H:%M:%S')}\n"
                    f"   üïê –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {minutes_inactive}/{current_timeout} —Ö–≤ ({period_name.lower()})\n"
                    f"   üìä –î–µ–Ω—å/–ù—ñ—á: {group.monitoring.day_inactive_minutes}/{group.monitoring.night_inactive_minutes} —Ö–≤\n"
                    f"   ‚úÖ –î–æ—Å—Ç—É–ø: {'–¢–∞–∫' if self.chat_accessible.get(chat_id, False) else '–ù—ñ'}\n"
                    f"   üîÑ API: {'–£–≤—ñ–º–∫–Ω–µ–Ω–æ' if group.api_reboot.enabled else '–í–∏–º–∫–Ω–µ–Ω–æ'}\n"
                    f"   üì° –°—Ç–∞—Ç—É—Å: {reboot_status if group.api_reboot.enabled else 'N/A'}\n"
                )
            else:
                current_timeout = (
                    self.get_current_timeout_for_group(group)
                    if group.monitoring.enabled
                    else 0
                )
                status_lines.append(
                    f"{status_icon} **{group.name}**\n"
                    f"   üÜî ID: `{chat_id}`\n"
                    f"   üìä –î–µ–Ω—å/–ù—ñ—á: {group.monitoring.day_inactive_minutes}/{group.monitoring.night_inactive_minutes} —Ö–≤\n"
                    f"   ‚è≥ –ü–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ä—ñ–≥: {current_timeout} —Ö–≤\n"
                    f"   üìä –°—Ç–∞—Ç—É—Å: {'–í–∏–º–∫–Ω–µ–Ω–æ' if not group.monitoring.enabled else '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö'}\n"
                )

        check_interval = self.config["global_settings"]["check_interval_seconds"]
        night_hours = self.get_night_hours()
        status_lines.append(
            f"\nüîÑ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {check_interval} —Å–µ–∫—É–Ω–¥\n"
            f"üåô –ù—ñ—á–Ω—ñ –≥–æ–¥–∏–Ω–∏: {night_hours.start} - {night_hours.end}\n"
            f"üü¢ - –≤ –º–µ–∂–∞—Ö –Ω–æ—Ä–º–∏, üî¥ - –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ø–æ—Ä—ñ–≥"
        )

        await event.edit("\n".join(status_lines))

    async def handle_groups_command(self, event):
        """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≥—Ä—É–ø –∑ –¥–µ–Ω—å/–Ω—ñ—á –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
        all_groups = self.get_groups()
        is_night = self.is_night_time()
        period_icon = "üåô" if is_night else "‚òÄÔ∏è"

        groups_lines = [f"üë• **–í—Å—ñ –≥—Ä—É–ø–∏ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:** {period_icon}\n"]

        for i, group in enumerate(all_groups, 1):
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if group.monitoring.enabled else "‚è∏Ô∏è –í–∏–º–∫–Ω–µ–Ω–∞"
            api_status = "üîÑ –¢–∞–∫" if group.api_reboot.enabled else "‚ùå –ù—ñ"
            current_timeout = (
                self.get_current_timeout_for_group(group)
                if group.monitoring.enabled
                else 0
            )

            groups_lines.append(
                f"**{i}. {group.name}**\n"
                f"   üìù {group.description}\n"
                f"   üÜî ID: `{group.chat_id}`\n"
                f"   üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {status}\n"
                f"   ‚òÄÔ∏è –î–µ–Ω—å: {group.monitoring.day_inactive_minutes} —Ö–≤\n"
                f"   üåô –ù—ñ—á: {group.monitoring.night_inactive_minutes} —Ö–≤\n"
                f"   ‚è≥ –ó–∞—Ä–∞–∑: {current_timeout} —Ö–≤\n"
                f"   üîÑ API Reboot: {api_status}\n"
            )

        await event.edit("\n".join(groups_lines))

    async def handle_test_command(self, event):
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /test –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—ñ —Ç–∞–π–º–∞—É—Ç–∏"""
        await event.edit("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –≥—Ä—É–ø...")

        all_groups = self.get_groups()
        is_night = self.is_night_time()
        period_icon = "üåô" if is_night else "‚òÄÔ∏è"
        results = []

        for group in all_groups:
            access = await self.validate_chat_access(group)
            access_icon = "‚úÖ" if access else "‚ùå"
            status_icon = "üü¢" if group.monitoring.enabled else "‚è∏Ô∏è"
            api_icon = "üîÑ" if group.api_reboot.enabled else "‚ùå"
            current_timeout = (
                self.get_current_timeout_for_group(group)
                if group.monitoring.enabled
                else 0
            )

            results.append(
                f"{access_icon}{status_icon} {group.name} "
                f"({current_timeout}—Ö–≤{period_icon}) {api_icon}"
            )

        result_text = f"üß™ **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:** {period_icon}\n\n" + "\n".join(
            results
        )
        result_text += (
            "\n\n**–õ–µ–≥–µ–Ω–¥–∞:**\n"
            "‚úÖ‚ùå - –¥–æ—Å—Ç—É–ø –¥–æ —á–∞—Ç—É\n"
            "üü¢‚è∏Ô∏è - —Å—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n"
            "üîÑ‚ùå - API reboot\n"
            f"(N—Ö–≤{period_icon}) - –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞–π–º–∞—É—Ç\n"
            "‚òÄÔ∏è - –¥–µ–Ω—å, üåô - –Ω—ñ—á"
        )
        await event.edit(result_text)

    async def handle_reload_command(self, event):
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /reload"""
        try:
            await event.edit("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é...")
            old_groups_count = len(self.get_enabled_groups())

            self.config = self.load_config("config.json")
            self.setup_timezone()  # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å–æ–≤—É –∑–æ–Ω—É
            new_groups_count = len(self.get_enabled_groups())

            await event.edit(
                f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!\n"
                f"üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä—É–ø: {old_groups_count} ‚Üí {new_groups_count}\n"
                f"üåç –ß–∞—Å–æ–≤–∞ –∑–æ–Ω–∞: {self.timezone}\n"
                f"{self.get_time_period_name()} –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º"
            )
            logger.info("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
        except Exception as e:
            await event.edit(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {str(e)}")
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")

    async def handle_manual_reboot_command(self, event):
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /reboot [–Ω–∞–∑–≤–∞_–≥—Ä—É–ø–∏]"""
        try:
            parts = event.text.split()
            if len(parts) < 2:
                enabled_groups = self.get_enabled_groups()
                group_info = []
                for g in enabled_groups:
                    current_timeout = self.get_current_timeout_for_group(g)
                    period_icon = "üåô" if self.is_night_time() else "‚òÄÔ∏è"
                    group_info.append(f"‚Ä¢ {g.name} ({current_timeout}—Ö–≤{period_icon})")

                await event.edit(
                    f"‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/reboot –Ω–∞–∑–≤–∞_–≥—Ä—É–ø–∏`\n\n"
                    f"**–î–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä—É–ø–∏:**\n" + "\n".join(group_info)
                )
                return

            group_name = " ".join(parts[1:])
            all_groups = self.get_groups()

            target_group = None
            for group in all_groups:
                if group.name.lower() == group_name.lower():
                    target_group = group
                    break

            if not target_group:
                available_groups = []
                for g in all_groups:
                    current_timeout = self.get_current_timeout_for_group(g)
                    period_icon = "üåô" if self.is_night_time() else "‚òÄÔ∏è"
                    available_groups.append(
                        f"‚Ä¢ {g.name} ({current_timeout}—Ö–≤{period_icon})"
                    )

                await event.edit(
                    f"‚ùå –ì—Ä—É–ø–∞ '{group_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.\n\n"
                    f"**–î–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä—É–ø–∏:**\n" + "\n".join(available_groups)
                )
                return

            if not target_group.monitoring.enabled:
                await event.edit(
                    f"‚ùå –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è –≥—Ä—É–ø–∏ '{target_group.name}'"
                )
                return

            if not target_group.api_reboot.enabled:
                await event.edit(
                    f"‚ùå API reboot –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è –≥—Ä—É–ø–∏ '{target_group.name}'"
                )
                return

            current_timeout = self.get_current_timeout_for_group(target_group)
            period_name = "–Ω—ñ—á–Ω–∏–π" if self.is_night_time() else "–¥–µ–Ω–Ω–∏–π"

            await event.edit(
                f"üîÑ –í–∏–∫–ª–∏–∫–∞—é reboot –¥–ª—è –≥—Ä—É–ø–∏ '{target_group.name}'\n"
                f"({period_name} —Ä–µ–∂–∏–º, –ø–æ—Ä—ñ–≥: {current_timeout} —Ö–≤)..."
            )

            if await self.call_api_reboot(target_group):
                await event.edit(
                    f"‚úÖ Reboot —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è –≥—Ä—É–ø–∏ '{target_group.name}'"
                )
                await self.send_api_reboot_notification(
                    target_group, self.is_night_time(), current_timeout
                )
            else:
                await event.edit(
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É reboot –¥–ª—è –≥—Ä—É–ø–∏ '{target_group.name}'"
                )

        except Exception as e:
            await event.edit(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ manual reboot: {e}")

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞
            await self.initialize_client()

            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–∞–Ω–∞–ª —Å–ø–æ–≤—ñ—â–µ–Ω—å
            if not await self.setup_notification_channel():
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª —Å–ø–æ–≤—ñ—â–µ–Ω—å")
                return

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ —É–≤—ñ–º–∫–Ω–µ–Ω–∏—Ö –≥—Ä—É–ø
            enabled_groups = self.get_enabled_groups()
            all_groups = self.get_groups()

            if not enabled_groups:
                logger.error("–ù–µ–º–∞—î —É–≤—ñ–º–∫–Ω–µ–Ω–∏—Ö –≥—Ä—É–ø –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
                return

            accessible_groups = []

            for group in enabled_groups:
                if await self.validate_chat_access(group):
                    accessible_groups.append(group)
                    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ
                    self.last_message_time[group.chat_id] = datetime.now(self.timezone)
                    self.notification_sent[group.chat_id] = False
                    self.api_reboot_sent[group.chat_id] = False

            if not accessible_groups:
                logger.error("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
                return

            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            self.setup_event_handlers()

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await self.send_start_notification(accessible_groups, all_groups)

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            asyncio.create_task(self.check_inactivity())

            logger.info("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            await self.client.run_until_disconnected()

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

    async def send_start_notification(
        self, accessible_groups: List[GroupConfig], all_groups: List[GroupConfig]
    ):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑ –¥–µ–Ω—å/–Ω—ñ—á —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
        check_interval = self.config["global_settings"]["check_interval_seconds"]
        current_time = datetime.now(self.timezone)
        is_night = self.is_night_time(current_time)
        night_hours = self.get_night_hours()
        period_icon = "üåô" if is_night else "‚òÄÔ∏è"
        period_name = "–ù—ñ—á–Ω–∏–π" if is_night else "–î–µ–Ω–Ω–∏–π"

        group_list = []
        for group in accessible_groups:
            api_status = "üîÑ" if group.api_reboot.enabled else "‚ùå"
            current_timeout = self.get_current_timeout_for_group(group)

            group_list.append(
                f"üì± {group.name}\n"
                f"   üÜî `{group.chat_id}`\n"
                f"   ‚òÄÔ∏è –î–µ–Ω—å: {group.monitoring.day_inactive_minutes} —Ö–≤\n"
                f"   üåô –ù—ñ—á: {group.monitoring.night_inactive_minutes} —Ö–≤\n"
                f"   ‚è≥ –ó–∞—Ä–∞–∑ ({period_name.lower()}): {current_timeout} —Ö–≤\n"
                f"   üîÑ API: {api_status}"
            )

        disabled_count = len(all_groups) - len(accessible_groups)

        start_message = (
            f"ü§ñ **–ú—É–ª—å—Ç–∏-–≥—Ä—É–ø–æ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ!** {period_icon}\n\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä—É–ø: {len(accessible_groups)}/{len(all_groups)}\n"
            f"‚è∏Ô∏è –í–∏–º–∫–Ω–µ–Ω–∏—Ö –≥—Ä—É–ø: {disabled_count}\n"
            f"üîÑ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {check_interval} —Å–µ–∫\n"
            f"üåç –ß–∞—Å–æ–≤–∞ –∑–æ–Ω–∞: {self.timezone}\n"
            f"üåô –ù—ñ—á–Ω—ñ –≥–æ–¥–∏–Ω–∏: {night_hours.start} - {night_hours.end}\n"
            f"{period_icon} –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º: {period_name}\n"
            f"üïê –ß–∞—Å –∑–∞–ø—É—Å–∫—É: {current_time.strftime('%H:%M:%S %d.%m.%Y')}\n\n"
            f"**–ê–∫—Ç–∏–≤–Ω—ñ –≥—Ä—É–ø–∏:**\n" + "\n\n".join(group_list) + "\n\n"
            f"**–ö–æ–º–∞–Ω–¥–∏:**\n"
            f"`/status` - –¥–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å\n"
            f"`/groups` - —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≥—Ä—É–ø\n"
            f"`/time` - –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —Ç–∞ —Ä–µ–∂–∏–º\n"
            f"`/test` - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É\n"
            f"`/reload` - –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é\n"
            f"`/reboot –Ω–∞–∑–≤–∞_–≥—Ä—É–ø–∏` - —Ä—É—á–Ω–∏–π reboot"
        )

        await self.send_notification(start_message)

async def main():
    try:
        monitor = TelegramMultiMonitor("config.json")
        await monitor.start_monitoring()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
        print("\nüîß –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—é:")
        print("1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å generate_session.py –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è session_string")
        print("2. –°–∫–æ–ø—ñ—é–π—Ç–µ –æ—Ç—Ä–∏–º–∞–Ω–∏–π session_string –≤ config.json")
        print("3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å API_ID —Ç–∞ API_HASH")
        print("4. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å pytz: pip install pytz")
        sys.exit(1)

#--------------------------------------------------------------------
if __name__ == "__main__":
    asyncio.run(main())