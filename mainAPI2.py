import asyncio
import subprocess
import signal
from datetime import datetime
from typing import Optional, Dict, Any
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –ª–æ–≥—ñ–≤
monitor_logs = []
max_log_lines = 100


class AsyncMonitorController:
    def __init__(self):
        self.process: Optional[subprocess.Popen] = None
        self.status = "stopped"
        self.start_time: Optional[datetime] = None
        self.log_file = "monitor.log"
        self.log_task: Optional[asyncio.Task] = None

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        if self.process and self.process.poll() is None:
            return {
                "status": "running",
                "pid": self.process.pid,
                "start_time": self.start_time.isoformat() if self.start_time else None,
                "uptime": str(datetime.now() - self.start_time)
                if self.start_time
                else None,
            }
        else:
            return {
                "status": "stopped",
                "pid": None,
                "start_time": None,
                "uptime": None,
            }

    async def start_monitor(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        if self.process and self.process.poll() is None:
            return {"success": False, "message": "–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ"}

        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç
            self.process = subprocess.Popen(
                ["python", "main.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1,
            )

            self.start_time = datetime.now()
            self.status = "running"

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
            self.log_task = asyncio.create_task(self._read_logs_async())

            logger.info(f"‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ (PID: {self.process.pid})")

            return {
                "success": True,
                "message": f"–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ (PID: {self.process.pid})",
                "pid": self.process.pid,
            }

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            return {"success": False, "message": f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {str(e)}"}

    async def stop_monitor(self) -> Dict[str, Any]:
        """–ó—É–ø–∏–Ω—è—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        if not self.process or self.process.poll() is not None:
            return {"success": False, "message": "–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ"}

        try:
            logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
            pid = self.process.pid

            # –ó—É–ø–∏–Ω—è—î–º–æ task —á–∏—Ç–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
            if self.log_task and not self.log_task.done():
                self.log_task.cancel()
                try:
                    await self.log_task
                except asyncio.CancelledError:
                    pass

            # Graceful shutdown
            self.process.terminate()

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É
            try:
                await asyncio.wait_for(
                    asyncio.create_task(self._wait_for_process()), timeout=10.0
                )
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è, –ø—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...")
                self.process.kill()
                await asyncio.create_task(self._wait_for_process())

            self.process = None
            self.start_time = None
            self.status = "stopped"
            self.log_task = None

            logger.info(f"‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ (PID: {pid})")

            return {"success": True, "message": f"–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ (PID: {pid})"}

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏: {e}")
            return {"success": False, "message": f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏: {str(e)}"}

    async def restart_monitor(self) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")

        stop_result = await self.stop_monitor()
        if stop_result["success"] or "–Ω–µ –∑–∞–ø—É—â–µ–Ω–æ" in stop_result["message"]:
            # –ö–æ—Ä–æ—Ç–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ø–∞—É–∑–∞
            await asyncio.sleep(2)
            return await self.start_monitor()
        else:
            return stop_result

    async def _wait_for_process(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ–∫–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É"""
        while self.process and self.process.poll() is None:
            await asyncio.sleep(0.1)

    async def _read_logs_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–∏—Ç–∞—î –ª–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—É"""
        global monitor_logs

        try:
            logger.info("üìù –ü–æ—á–∞—Ç–æ–∫ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–≥—ñ–≤...")

            while self.process and self.process.poll() is None:
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–∏—Ç–∞—î–º–æ –≤–∏—Ö—ñ–¥ –ø—Ä–æ—Ü–µ—Å—É
                line = await asyncio.create_task(
                    asyncio.to_thread(self.process.stdout.readline)
                )

                if line:
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    log_entry = f"[{timestamp}] {line.strip()}"
                    monitor_logs.append(log_entry)

                    # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–≥—ñ–≤
                    if len(monitor_logs) > max_log_lines:
                        monitor_logs = monitor_logs[-max_log_lines:]

                    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø–∏—Å—É—î–º–æ –≤ —Ñ–∞–π–ª
                    await self._write_log_to_file_async(log_entry)

                    # –õ–æ–≥—É—î–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
                    logger.debug(f"LOG: {log_entry}")

                # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ event loop
                await asyncio.sleep(0.01)

        except asyncio.CancelledError:
            logger.info("üìù –ß–∏—Ç–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            raise
        except Exception as e:
            error_msg = f"[ERROR] –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–≥—ñ–≤: {str(e)}"
            monitor_logs.append(error_msg)
            logger.error(error_msg)

    async def _write_log_to_file_async(self, log_entry: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø–∏—Å—É—î –ª–æ–≥ —É —Ñ–∞–π–ª"""
        try:
            await asyncio.to_thread(self._write_log_sync, log_entry)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –ª–æ–≥—É: {e}")

    def _write_log_sync(self, log_entry: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–∞–ø–∏—Å –ª–æ–≥—É (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ)"""
        try:
            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(f"{log_entry}\n")
                f.flush()
        except Exception:
            pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∑–∞–ø–∏—Å—É

    async def get_logs(self, last_n: int = 50) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ N –ª–æ–≥—ñ–≤"""
        global monitor_logs
        return {"logs": monitor_logs[-last_n:]}

    async def clear_logs(self) -> Dict[str, Any]:
        """–û—á–∏—â–∞—î –ª–æ–≥–∏"""
        global monitor_logs
        monitor_logs = []
        return {"success": True, "message": "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω–æ"}

    async def get_log_file_content(self) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–∏—Ç–∞—î –≤–º—ñ—Å—Ç –ª–æ–≥ —Ñ–∞–π–ª—É"""
        try:
            content = await asyncio.to_thread(self._read_log_file_sync)
            return content
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –ª–æ–≥—ñ–≤: {str(e)}"

    def _read_log_file_sync(self) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–≥ —Ñ–∞–π–ª—É"""
        try:
            with open(self.log_file, "r", encoding="utf-8") as f:
                return f.read()
        except FileNotFoundError:
            return "–§–∞–π–ª –ª–æ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
controller = AsyncMonitorController()

# FastAPI endpoints –∑ async/await
from fastapi import FastAPI

app = FastAPI(title="Async Telegram Monitor Control Panel")


@app.post("/api/monitor/start")
async def start_monitor():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    return await controller.start_monitor()


@app.post("/api/monitor/stop")
async def stop_monitor():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    return await controller.stop_monitor()


@app.post("/api/monitor/restart")
async def restart_monitor():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    return await controller.restart_monitor()


@app.get("/api/monitor/status")
async def get_monitor_status():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    return controller.get_status()


@app.get("/api/monitor/logs")
async def get_logs():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–≤"""
    return await controller.get_logs()


@app.post("/api/monitor/logs/clear")
async def clear_logs():
    """–û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤"""
    return await controller.clear_logs()


@app.get("/api/monitor/logs/file")
async def get_log_file():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–º—ñ—Å—Ç—É –ª–æ–≥ —Ñ–∞–π–ª—É"""
    content = await controller.get_log_file_content()
    return {"content": content}


# Graceful shutdown
import signal
import sys


async def shutdown_handler():
    """–û–±—Ä–æ–±–Ω–∏–∫ graceful shutdown"""
    logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è, –∑—É–ø–∏–Ω—è—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...")
    await controller.stop_monitor()
    logger.info("‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏")


def signal_handler(signum, frame):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤"""
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}")
    asyncio.create_task(shutdown_handler())


# –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

if __name__ == "__main__":
    import uvicorn

    print("ü§ñ Async Telegram Monitor - Control Panel")
    print("=" * 60)
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: SergZels")
    print("üîÑ –†–µ–∂–∏–º: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π")
    print("")
    print("üéõÔ∏è  –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:")
    print("   ‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å–∞–º–∏")
    print("   üìù –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–≥—ñ–≤")
    print("   üîÑ Non-blocking –æ–ø–µ—Ä–∞—Ü—ñ—ó")
    print("   ‚öôÔ∏è Graceful shutdown")
    print("")
    print("üöÄ –ó–∞–ø—É—Å–∫ Async Control Panel...")
    print("üåê –í—ñ–¥–∫—Ä–∏–π—Ç–µ —É –±—Ä–∞—É–∑–µ—Ä—ñ: http://localhost:8080")
    print("‚èπÔ∏è  –ó—É–ø–∏–Ω–∏—Ç–∏: Ctrl+C")
    print("=" * 60)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –¥–ª—è async
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8080,
        loop="asyncio",  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ asyncio event loop
        log_level="info"
    )